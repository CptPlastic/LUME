name: 'Release Build'

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.1
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.2.1'
      draft:
        description: 'Create as draft release'
        type: boolean
        default: false

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag-name: ${{ steps.version.outputs.tag-name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag-name=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  generate-release-notes:
    needs: get-version
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate release notes
        id: notes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
          CURRENT_TAG=${{ needs.get-version.outputs.tag-name }}
          
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating notes from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Generate commit messages
          COMMITS=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..$CURRENT_TAG 2>/dev/null || git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          
          # Create release notes
          NOTES="## Changes in v${{ needs.get-version.outputs.version }}

          $COMMITS"
          
          # Save to output (handle multiline)
          {
            echo 'notes<<EOF'
            echo "$NOTES"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  create-github-release:
    needs: [get-version, generate-release-notes]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release-id: ${{ steps.create-release.outputs.release-id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Create Release
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_NOTES="${{ needs.generate-release-notes.outputs.release-notes }}"
          DRAFT_FLAG=""
          if [[ "${{ github.event.inputs.draft }}" == "true" ]]; then
            DRAFT_FLAG="--draft"
          fi
          
          RELEASE_OUTPUT=$(gh release create "${{ needs.get-version.outputs.tag-name }}" \
            --title "LUME Controller v${{ needs.get-version.outputs.version }}" \
            --notes "$RELEASE_NOTES" \
            $DRAFT_FLAG \
            --repo "${{ github.repository }}")
          
          # Extract release ID from the URL
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ needs.get-version.outputs.tag-name }} --jq .id)
          echo "release-id=$RELEASE_ID" >> $GITHUB_OUTPUT

  build:
    needs: [get-version, generate-release-notes, create-github-release]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'   # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'   # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src/lume_desk/src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './src/lume_desk/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./src/lume_desk

      - name: Update version in tauri.conf.json
        run: |
          cd src/lume_desk/src-tauri
          # Update version in tauri.conf.json
          sed -i.bak 's/"version": ".*"/"version": "${{ needs.get-version.outputs.version }}"/' tauri.conf.json
          rm tauri.conf.json.bak || true
          cat tauri.conf.json | grep version
        shell: bash

      - name: Update version in package.json
        run: |
          cd src/lume_desk
          # Update version in package.json
          sed -i.bak 's/"version": ".*"/"version": "${{ needs.get-version.outputs.version }}"/' package.json
          rm package.json.bak || true
          cat package.json | grep version
        shell: bash

      - name: Verify Tauri signing configuration
        run: |
          cd src/lume_desk/src-tauri
          echo "‚úÖ Using permanent Tauri signing key from repository secrets"
          echo "‚úÖ Public key already configured in tauri.conf.json"
          # Verify public key is configured
          if grep -q '"pubkey": ""' tauri.conf.json; then
            echo "‚ùå Error: Public key not configured in tauri.conf.json"
            exit 1
          else
            echo "‚úÖ Public key is configured"
          fi
        shell: bash

      - name: Generate signature files
        run: |
          cd src/lume_desk
          echo "‚úÖ Tauri will automatically generate signatures during build"
          echo "Signatures will be computed and made available via the updater endpoint"
        shell: bash

      - name: Check for code signing secrets (macOS)
        if: matrix.platform == 'macos-latest'
        id: check_secrets
        run: |
          if [[ -n "${{ secrets.APPLE_CERTIFICATE }}" ]]; then
            echo "has_signing=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Code signing certificates found"
          else
            echo "has_signing=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No code signing certificates - building unsigned"
            echo "üí° Add APPLE_* secrets to enable code signing"
          fi

      - name: Build the app (with code signing)
        if: matrix.platform != 'macos-latest' || steps.check_secrets.outputs.has_signing == 'true'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          projectPath: ./src/lume_desk
          tagName: ${{ needs.get-version.outputs.tag-name }}
          releaseName: 'LUME Controller v${{ needs.get-version.outputs.version }}'
          releaseBody: ${{ needs.generate-release-notes.outputs.release-notes }}
          releaseDraft: ${{ github.event.inputs.draft == 'true' || false }}
          prerelease: false
          releaseId: ${{ needs.create-github-release.outputs.release-id }}
          args: ${{ matrix.args }}

      - name: Build the app (unsigned macOS)
        if: matrix.platform == 'macos-latest' && steps.check_secrets.outputs.has_signing == 'false'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        with:
          projectPath: ./src/lume_desk
          tagName: ${{ needs.get-version.outputs.tag-name }}
          releaseName: 'LUME Controller v${{ needs.get-version.outputs.version }} (Unsigned)'
          releaseBody: |
            ‚ö†Ô∏è **Note**: This macOS build is unsigned. Right-click and select "Open" to run it.
            
            ${{ needs.generate-release-notes.outputs.release-notes }}
          releaseDraft: ${{ github.event.inputs.draft == 'true' || false }}
          prerelease: false
          releaseId: ${{ needs.create-github-release.outputs.release-id }}
          args: ${{ matrix.args }}

      - name: Code signing status
        if: matrix.platform == 'macos-latest'
        run: |
          if [[ "${{ steps.check_secrets.outputs.has_signing }}" == "true" ]]; then
            echo "‚úÖ Built with code signing - users can run directly"
          else
            echo "‚ö†Ô∏è Built without code signing - users will see security warnings"
            echo ""
            echo "To enable code signing, add these repository secrets:"
            echo "  ‚Ä¢ APPLE_CERTIFICATE (Base64 encoded .p12 certificate)"
            echo "  ‚Ä¢ APPLE_CERTIFICATE_PASSWORD"
            echo "  ‚Ä¢ APPLE_SIGNING_IDENTITY"
            echo "  ‚Ä¢ APPLE_ID"
            echo "  ‚Ä¢ APPLE_PASSWORD (App-specific password)"
            echo "  ‚Ä¢ APPLE_TEAM_ID"
          fi

  release-summary:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Release Summary
        run: |
          echo "## üéâ Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.get-version.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms Built:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ macOS (Intel & Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Windows (x64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release is now available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.get-version.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY