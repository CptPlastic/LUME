name: 'Release Build'

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.2.1
  workflow_dispatch:  # Allows manual triggering
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.2.1'
      draft:
        description: 'Create as draft release'
        type: boolean
        default: false

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag-name: ${{ steps.version.outputs.tag-name }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag-name=v$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

  build:
    needs: get-version
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'   # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'   # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: 'x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            target: 'x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src/lume_desk/src-tauri -> target'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './src/lume_desk/package-lock.json'

      - name: Install frontend dependencies
        run: npm ci
        working-directory: ./src/lume_desk

      - name: Update version in tauri.conf.json
        run: |
          cd src/lume_desk/src-tauri
          # Update version in tauri.conf.json
          sed -i.bak 's/"version": ".*"/"version": "${{ needs.get-version.outputs.version }}"/' tauri.conf.json
          rm tauri.conf.json.bak || true
          cat tauri.conf.json | grep version
        shell: bash

      - name: Update version in package.json
        run: |
          cd src/lume_desk
          # Update version in package.json
          sed -i.bak 's/"version": ".*"/"version": "${{ needs.get-version.outputs.version }}"/' package.json
          rm package.json.bak || true
          cat package.json | grep version
        shell: bash

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          projectPath: ./src/lume_desk
          tagName: ${{ needs.get-version.outputs.tag-name }}
          releaseName: 'LUME Controller v${{ needs.get-version.outputs.version }}'
          releaseBody: |
            ## 🎆 LUME Desktop Controller v${{ needs.get-version.outputs.version }}
            
            Professional firework and lighting control application.
            
            ### What's New
            - Enhanced ARM/DISARM system for improved safety
            - Fixed export functionality
            - Improved play-from-cursor timing
            - Better visual feedback and user experience
            
            ### Download Instructions
            - **Windows**: Download `.exe` or `.msi` file
            - **macOS**: Download `.dmg` file
            - **Linux**: Download `.AppImage` or `.deb` file
            
            ### System Requirements
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.15 (Catalina) or later
            - **Linux**: Ubuntu 20.04+ or equivalent
            
            Built with ❤️ for the pyrotechnics community.
          releaseDraft: ${{ github.event.inputs.draft == 'true' || false }}
          prerelease: false
          args: ${{ matrix.args }}

  create-release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Release Summary
        run: |
          echo "## 🎉 Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.get-version.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platforms Built:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS (Intel & Apple Silicon)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Windows (x64)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linux (x64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Release is now available at: https://github.com/${{ github.repository }}/releases/tag/${{ needs.get-version.outputs.tag-name }}" >> $GITHUB_STEP_SUMMARY